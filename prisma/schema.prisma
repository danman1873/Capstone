// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @unique
  userCoinTotal Coins[]
  userQuestList Quests[]
  userRewards   Rewards[]
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

model Coins {
  id        String  @id @default(cuid())
  coinCount Int
  user      User?   @relation(fields: [coinId], references: [id])
  coinId    String
}

model Quests {
  id             String  @id @default(cuid())
  quests         String
  questCoinWorth Int
  user           User?   @relation(fields: [questId], references: [id])
  questId        String
}

model Rewards {
  id             String  @id @default(cuid())
  rewards        String
  rewardCoinCost Int
  user           User?   @relation(fields: [rewardId], references: [id])
  rewardId       String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
